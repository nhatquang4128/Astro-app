/// <reference types="react" />
export declare type TWordArray = ReadonlyArray<string | boolean>;
export declare type TCallbackData = {
    wordArray: TWordArray;
    wordString: string;
};
declare type TWordStructure = ReadonlyArray<boolean>;
declare type TLineBreakOnSpace = boolean;
declare type TSmartChunkedArray = ReadonlyArray<TWordStructure>;
declare type TAllowedSizes = 'small' | 'medium' | 'large';
declare type TIndividualCharsInput = {
    wordStructure: TWordStructure;
    autoFocus?: boolean;
    maxBoxesPerLine?: number;
    lineBreakOnSpace?: TLineBreakOnSpace;
    borderColor?: string;
    backgroundColor?: string;
    textColor?: string;
    size?: TAllowedSizes;
    onChange: (inputContent: TCallbackData) => void;
};
export declare const transformWordStructureToTemplateArray: (wordStructure: TWordStructure) => TWordArray;
export declare const transformWordStructureToString: (wordStructure: TWordStructure) => string;
export declare const transformStringWordStructureToSArr: (wordStructureAsString: ReadonlyArray<string>) => TSmartChunkedArray;
export declare const getSmartChunkedArray: (wordStructure: TWordStructure, lineBreakOnSpace: TLineBreakOnSpace, maxBoxesPerLine: number) => TSmartChunkedArray;
export declare const getNextValidIndex: (wordStructure: TWordStructure, currentIndex: number) => number;
export declare const getPreviousValidIndex: (wordStructure: TWordStructure, currentIndex: number) => number;
export declare const getWordStringForExternalMethod: (newWordArray: TWordArray) => string;
export declare const getWordArrayForExternalMethod: (wordStructure: TWordStructure, newWordArray: string[]) => ReadonlyArray<string | false>;
export declare const getDerivedIndex: (smartChunkedArray: TSmartChunkedArray, rowIndex: number, indexInRow: number) => number;
export declare const QuizInput: (props: TIndividualCharsInput) => JSX.Element;
declare const _default: any;
export default _default;
